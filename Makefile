# Makefile for mflux Python 3.10+ project, using 3.11 as recommended Python as of Sep 2024

PYTHON_VERSION = 3.11
VENV_DIR = .venv
PYTHON = $(VENV_DIR)/bin/python
UV = uv

# Default target
.PHONY: all
all: install test

.PHONY: expect-arm64
expect-arm64:
	@echo "üîç Checking machine architecture..."
	@if [ "$$(uname -m)" != "arm64" ]; then \
		echo "‚ùå mflux and MLX is not compatible with older Intel Macs. This project does not support your Mac."; \
		exit 1; \
	fi
	@echo "‚úÖ Architecture check passed"

.PHONY: expect-uv
expect-uv:
	@echo "üîç Checking for uv installation..."
	@if ! command -v uv >/dev/null 2>&1; then \
		echo "‚ùå uv not found. Please install uv:"; \
		echo "    https://github.com/astral-sh/uv?tab=readme-ov-file#installation"; \
		exit 1; \
	fi
	@echo "‚úÖ uv is installed"
	@uv --version

# Create virtual environment with uv
.PHONY: venv-init
venv-init: expect-arm64 expect-uv
	@echo "üèóÔ∏è Creating virtual environment..."
	$(UV) venv --python $(PYTHON_VERSION) $(VENV_DIR)
	@echo "‚úÖ Virtual environment created at $(VENV_DIR)"

# Install dependencies
.PHONY: install
install: venv-init
	@echo "üèóÔ∏è Installing dependencies..."
	@echo "1. Installing project dependencies..."
	$(UV) pip install -e .
	@echo "2. Installing pre-commit..."
	$(UV) pip install pre-commit
	@echo "3. Installing pre-commit hooks..."
	$(VENV_DIR)/bin/pre-commit install
	@echo "4. Configuring shell..."
	@echo "source $(PWD)/$(VENV_DIR)/bin/activate" > $(PWD)/.env
	@echo "‚úÖ Installation complete"
	@echo "‚≠ê To activate the environment, run: source .env"

# Run linters
.PHONY: lint
lint:
	# üèóÔ∏è Running linters, your files will not be mutated.
	# Use 'make check' to auto-apply fixes."
	ruff check
	# ‚úÖ Linting complete."

# Run formatter (if dev does not do so in their IDE)
.PHONY: format
format:
	# üèóÔ∏è Running formatter, your files will be changed to comply to formatting configs.
	ruff format
	# display the summaries of diffs in repo, some of these diffs are generated by the formatter
	git diff --stat
	# ‚úÖ Formatting complete. Please review your git diffs, if any.

# Run ruff auto lint and format via pre-commit hook
.PHONY: check
check:
	# üèóÔ∏è Running pre-commit linter and formatters on files...
	@(pre-commit run --all-files)

# Run tests
.PHONY: test
test:
	# üèóÔ∏è Running tests...
	$(PYTHON) -m pytest
	# ‚úÖ Tests completed

# Clean up
.PHONY: clean
clean:
	@echo "üßº Cleaning up..."
	rm -rf $(VENV_DIR)
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -exec rm -rf {} +
	rm -rf build dist *.egg-info
	@echo "‚úÖ Clean up complete"

# Help message
.PHONY: help
help:
	@echo "mflux commands:"
	@echo "  make all         - Set up the project and run tests"
	@echo "  make install     - Install project dev dependencies"
	@echo "  make lint        - Run ruff python linter"
	@echo "  make format      - Run ruff code formatter"
	@echo "  make check       - Run linters auto fixes *and* style formatter via pre-commit hook"
	@echo "  make test        - Run tests"
	@echo "  make clean       - Remove the virtual environment"
	@echo "  make help        - Show this help message"

.PHONY: install install-dev test lint format clean build docs

# Python settings
PYTHON := python3
VENV := .venv
PIP := $(VENV)/bin/pip

# Project settings
PROJECT_NAME := mflux
TEST_PATH := tests
SRC_PATH := src/mflux

# Build settings
DIST_PATH := dist
BUILD_PATH := build

# Documentation settings
DOCS_PATH := docs
DOCS_BUILD := $(DOCS_PATH)/_build

# Virtual environment
$(VENV)/bin/activate:
	$(PYTHON) -m venv $(VENV)
	$(PIP) install --upgrade pip
	$(PIP) install -e ".[dev]"

# Installation
install:
	$(PIP) install -e .

install-dev: $(VENV)/bin/activate
	$(PIP) install -e ".[dev]"
	pre-commit install

# Testing
test:
	$(PYTHON) -m pytest $(TEST_PATH) -v --cov=$(PROJECT_NAME) --cov-report=term-missing

test-watch:
	ptw $(TEST_PATH) --onpass "echo 'All tests passed! üéâ'"

# Linting and formatting
lint:
	ruff check $(SRC_PATH)
	ruff format --check $(SRC_PATH)

format:
	ruff check --fix $(SRC_PATH)
	ruff format $(SRC_PATH)

# Cleaning
clean:
	rm -rf $(DIST_PATH)
	rm -rf $(BUILD_PATH)
	rm -rf *.egg-info
	rm -rf .coverage
	rm -rf .pytest_cache
	rm -rf .ruff_cache
	find . -type d -name "__pycache__" -exec rm -r {} +
	find . -type f -name "*.pyc" -delete

# Building
build: clean
	$(PYTHON) -m build

# Documentation
docs:
	$(MAKE) -C $(DOCS_PATH) html
	@echo "Documentation built in $(DOCS_BUILD)/html"

docs-serve: docs
	$(PYTHON) -m http.server --directory $(DOCS_BUILD)/html

# Development helpers
dev-setup: install-dev
	@echo "Development environment setup complete! üöÄ"
	@echo "Run 'source $(VENV)/bin/activate' to activate the virtual environment"

# MLX specific targets
mlx-optimize:
	@echo "Optimizing for MLX..."
	$(PYTHON) -m $(PROJECT_NAME).tools.optimize_mlx

mlx-benchmark:
	@echo "Running MLX benchmarks..."
	$(PYTHON) -m $(PROJECT_NAME).tools.benchmark

# Help
help:
	@echo "Available commands:"
	@echo "  make install      - Install the package"
	@echo "  make install-dev  - Install development dependencies"
	@echo "  make test        - Run tests"
	@echo "  make lint        - Run linting checks"
	@echo "  make format      - Format code"
	@echo "  make clean       - Clean build artifacts"
	@echo "  make build       - Build package"
	@echo "  make docs        - Build documentation"
	@echo "  make dev-setup   - Setup development environment"
	@echo "  make mlx-optimize - Optimize for MLX"
	@echo "  make help        - Show this help message"
